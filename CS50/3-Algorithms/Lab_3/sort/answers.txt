sort1 uses: Merge Sort

How do you know?: 
    Merge sorts follows, O(n)
    looking at the run times, for huge lists, sort1 is the fastest. 

sort2 uses: Merge Selection Search

How do you know?: 
    Selection searches, in every cases, follows O(n^2).
    looking at the run times, sort 2 has almost the same execution times. .045s - .051s - .041s / .073s - .053s - .064s / .376s - .363s - .305s

sort3 uses: Bubble Search

How do you know?: 
    The worst case for Bubble seach is when the list is reversed, as the algorithm has to do the run 2 times.
    reversed50000 and sorted50000 take way more time than random50000. .977s & .947s Vs .293s


//

Selection n^2 n^2
Bubble n^2 n^2
Merge n log n 

                sort1               sort2               sort3
random5000      real    0m0,099s    real    0m0,045s    real    0m0,045s
        
random10000     real    0m0,301s    real    0m0,073s    real    0m0,157s
                    
random50000     real    0m7,294s    real    0m0,376s    real    0m3,293s
                    
reversed5000    real    0m0,093s    real    0m0,051s    real    0m0,122s
                    
reversed10000   real    0m0,335s    real    0m0,053s    real    0m0,147s
                    
reversed50000   real    0m5,423s    real    0m0,363s    real    0m2,947s

sorted5000      real    0m0,044s    real    0m0,041s    real    0m0,058s

sorted10000     real    0m0,059s    real    0m0,064s    real    0m0,167s

sorted50000     real    0m0,261s    real    0m0,305s    real    0m2,977s

